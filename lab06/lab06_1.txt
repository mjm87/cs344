Partners: Alastair Van Maren, Michel Momeyer

Framing:

Exercise 1:

    we want to build an AI that can play checkers, or at least evaluate moves

Exercise 2:

    it should be able to look at a set of moves and determine if it thinks they will
    be likely to eventually end up in a winning or a losing scenario

Exercise 3:

    Long term, if the evaluations of moves tend to lead toward winning more games than losing,
    then a win-loss ratio could be used.

    Short term, we would be more interested in how "correctly" it matched
    labeled move sets in our test samples. Failure would correspondingly
    be related to how poorly it matched move sequences.

Exercise 4:

    We want the model to tell us whether the moves so far seem like
    they will culminate in a win scenario or a losing scenario

Exercise 5:

    Knowing whether the model predicted success from a move or not
    would allow us to choose between various potential moves to essentially
    create a checkers ai to play against.

Exercise 6:

    Without using ML, we would probably end up using a alpha-beta pruning
    approach, using seemingly relevant heuristics in the checker's domain:
    number of red pieces/black pieces, number of promoted pieces,
    number of jump routes, etc.

Exercise 7:

    Binary classification that predicts whether or not a move or a sequence
    of moves would be good

    7b: a slightly simpler version tries to avoid the ambiguity of "good"
    and just is looking for patterns in games that were won and patterns
    in games that were lost

Exercise 8:

    The data for this could be randomly or recorded games of checkers,
    where the individual moves are strung together as input, and the labeled
    output would be the success / failure of the game.

    Note: so that the AI wouldn't just learn to detect whether or not a
    game has been won, the input data would have to be truncated to say the first
    20 moves or something.

Exercise 9:

    The data could be either retrieved (if checker's games are stored in some
    handy text-representation) or generated by having either existing checker's AI
    algorithms, basic greedy approaches, random bots, or perhaps even just recording
    checker's games from a digital checker's app.

Exercise 10:

    if we wanted to pre-feed some of the heuristics we mentioned earlier into the model
    we could calculate some of them and include them as part of the input stream